---
// CUNY Impact Calculator - Student-hours lost visualization
// Based on CUNY campus analysis and violation data
export interface CUNYImpactProps {
  showComparison?: boolean;
  allowCustomInput?: boolean;
}

interface Props extends CUNYImpactProps {}

const {
  showComparison = true,
  allowCustomInput = true
} = Astro.props;
---

<div id="cuny-impact-calculator" class="w-full bg-gradient-to-br from-indigo-50 to-purple-50 rounded-lg shadow-lg p-6">
  <div class="mb-6">
    <h3 class="text-2xl font-bold text-gray-900 mb-2">
      CUNY Student Impact Calculator
    </h3>
    <p class="text-gray-600">
      Calculate how bus violations affect student study time across 28 CUNY campuses
    </p>
  </div>

  <!-- Campus Selection & Input Controls -->
  <div class="mb-6 bg-white rounded-lg p-4 shadow-sm">
    <div class="grid md:grid-cols-3 gap-4 mb-4">
      <div>
        <label for="campus-select" class="block text-sm font-medium text-gray-700 mb-2">
          Select Campus
        </label>
        <select id="campus-select" class="w-full px-3 py-2 border border-gray-300 rounded-md">
          <option value="all">All CUNY Campuses</option>
          <option value="custom">Custom Analysis</option>
        </select>
      </div>

      <div>
        <label for="time-period" class="block text-sm font-medium text-gray-700 mb-2">
          Analysis Period
        </label>
        <select id="time-period" class="w-full px-3 py-2 border border-gray-300 rounded-md">
          <option value="academic-year">Academic Year 2024-25</option>
          <option value="semester">Current Semester</option>
          <option value="month">This Month</option>
          <option value="week">This Week</option>
        </select>
      </div>

      <div>
        <label for="calculation-mode" class="block text-sm font-medium text-gray-700 mb-2">
          Calculation Mode
        </label>
        <select id="calculation-mode" class="w-full px-3 py-2 border border-gray-300 rounded-md">
          <option value="conservative">Conservative Estimate</option>
          <option value="realistic">Realistic Impact</option>
          <option value="maximum">Maximum Impact</option>
        </select>
      </div>
    </div>

    {allowCustomInput && (
      <div id="custom-inputs" class="hidden mt-4 p-4 bg-gray-50 rounded border">
        <h4 class="font-medium text-gray-900 mb-3">Custom Analysis Parameters</h4>
        <div class="grid md:grid-cols-2 gap-4">
          <div>
            <label for="student-population" class="block text-sm font-medium text-gray-700 mb-1">
              Student Population
            </label>
            <input type="number" id="student-population" class="w-full px-3 py-2 border border-gray-300 rounded-md"
                   placeholder="Enter number of students">
          </div>
          <div>
            <label for="daily-commuters" class="block text-sm font-medium text-gray-700 mb-1">
              Daily Bus Commuters (%)
            </label>
            <input type="number" id="daily-commuters" class="w-full px-3 py-2 border border-gray-300 rounded-md"
                   placeholder="30" min="0" max="100">
          </div>
          <div>
            <label for="avg-commute-time" class="block text-sm font-medium text-gray-700 mb-1">
              Avg Commute Time (minutes)
            </label>
            <input type="number" id="avg-commute-time" class="w-full px-3 py-2 border border-gray-300 rounded-md"
                   placeholder="45">
          </div>
          <div>
            <label for="study-efficiency" class="block text-sm font-medium text-gray-700 mb-1">
              Study Efficiency on Bus (%)
            </label>
            <input type="number" id="study-efficiency" class="w-full px-3 py-2 border border-gray-300 rounded-md"
                   placeholder="65" min="0" max="100">
          </div>
        </div>
      </div>
    )}

    <button id="calculate-impact" class="mt-4 px-6 py-3 bg-indigo-600 text-white rounded-md font-medium hover:bg-indigo-700 transition-colors">
      Calculate Student Impact
    </button>
  </div>

  <!-- Results Dashboard -->
  <div id="results-dashboard" class="hidden">
    <!-- Key Metrics -->
    <div class="mb-6 grid grid-cols-2 md:grid-cols-4 gap-4">
      <div class="bg-white rounded-lg p-4 shadow-sm text-center">
        <div class="text-3xl font-bold text-red-600" id="lost-hours">---</div>
        <div class="text-sm text-gray-600">Study Hours Lost</div>
        <div class="text-xs text-gray-500 mt-1" id="lost-hours-period">per academic year</div>
      </div>

      <div class="bg-white rounded-lg p-4 shadow-sm text-center">
        <div class="text-3xl font-bold text-orange-600" id="affected-students">---</div>
        <div class="text-sm text-gray-600">Students Affected</div>
        <div class="text-xs text-gray-500 mt-1">daily average</div>
      </div>

      <div class="bg-white rounded-lg p-4 shadow-sm text-center">
        <div class="text-3xl font-bold text-purple-600" id="academic-impact">---</div>
        <div class="text-sm text-gray-600">Academic Impact</div>
        <div class="text-xs text-gray-500 mt-1">equivalent courses</div>
      </div>

      <div class="bg-white rounded-lg p-4 shadow-sm text-center">
        <div class="text-3xl font-bold text-blue-600" id="economic-cost">$---</div>
        <div class="text-sm text-gray-600">Economic Cost</div>
        <div class="text-xs text-gray-500 mt-1">lost productivity</div>
      </div>
    </div>

    <!-- Visualization Area -->
    <div class="grid md:grid-cols-2 gap-6 mb-6">
      <!-- Campus Comparison Chart -->
      <div class="bg-white rounded-lg p-6 shadow-sm">
        <h4 class="text-lg font-semibold mb-4">Impact by Campus</h4>
        <div id="campus-chart" class="h-64">
          <!-- D3 chart will be rendered here -->
        </div>
      </div>

      <!-- Time Distribution -->
      <div class="bg-white rounded-lg p-6 shadow-sm">
        <h4 class="text-lg font-semibold mb-4">Study Time Loss Distribution</h4>
        <div id="time-distribution-chart" class="h-64">
          <!-- D3 chart will be rendered here -->
        </div>
      </div>
    </div>

    <!-- Detailed Breakdown -->
    <div class="bg-white rounded-lg p-6 shadow-sm">
      <h4 class="text-lg font-semibold mb-4">Detailed Impact Analysis</h4>

      <div class="grid md:grid-cols-3 gap-6">
        <!-- Daily Impact -->
        <div>
          <h5 class="font-medium text-gray-800 mb-3">Daily Impact</h5>
          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span>Morning Commute Loss:</span>
              <span id="morning-loss" class="font-medium">-- min</span>
            </div>
            <div class="flex justify-between">
              <span>Evening Commute Loss:</span>
              <span id="evening-loss" class="font-medium">-- min</span>
            </div>
            <div class="flex justify-between">
              <span>Total Daily Loss:</span>
              <span id="daily-total" class="font-medium text-red-600">-- min</span>
            </div>
          </div>
        </div>

        <!-- Semester Impact -->
        <div>
          <h5 class="font-medium text-gray-800 mb-3">Semester Impact</h5>
          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span>Total Hours Lost:</span>
              <span id="semester-hours" class="font-medium">-- hours</span>
            </div>
            <div class="flex justify-between">
              <span>Equivalent Study Days:</span>
              <span id="study-days" class="font-medium">-- days</span>
            </div>
            <div class="flex justify-between">
              <span>Course Credit Impact:</span>
              <span id="credit-impact" class="font-medium text-orange-600">-- credits</span>
            </div>
          </div>
        </div>

        <!-- Recovery Scenarios -->
        <div>
          <h5 class="font-medium text-gray-800 mb-3">Recovery Scenarios</h5>
          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span>50% Improvement:</span>
              <span id="recovery-50" class="font-medium text-green-600">+-- hours</span>
            </div>
            <div class="flex justify-between">
              <span>75% Improvement:</span>
              <span id="recovery-75" class="font-medium text-green-600">+-- hours</span>
            </div>
            <div class="flex justify-between">
              <span>ClearLane Target:</span>
              <span id="clearlane-target" class="font-medium text-blue-600">+-- hours</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Personal Impact Calculator -->
    <div class="mt-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-6 border border-blue-200">
      <h4 class="text-lg font-semibold text-blue-900 mb-4">Personal Impact Calculator</h4>
      <p class="text-blue-700 mb-4">Calculate how violations affect YOUR commute and study time</p>

      <div class="grid md:grid-cols-3 gap-4 mb-4">
        <div>
          <label for="personal-route" class="block text-sm font-medium text-blue-800 mb-1">Your Bus Route</label>
          <input type="text" id="personal-route" class="w-full px-3 py-2 border border-blue-300 rounded-md"
                 placeholder="e.g., BxM10, B46">
        </div>
        <div>
          <label for="personal-frequency" class="block text-sm font-medium text-blue-800 mb-1">Commute Days/Week</label>
          <select id="personal-frequency" class="w-full px-3 py-2 border border-blue-300 rounded-md">
            <option value="5">5 days (M-F)</option>
            <option value="4">4 days</option>
            <option value="3">3 days</option>
            <option value="2">2 days</option>
          </select>
        </div>
        <div>
          <label for="personal-time" class="block text-sm font-medium text-blue-800 mb-1">Commute Time (min)</label>
          <input type="number" id="personal-time" class="w-full px-3 py-2 border border-blue-300 rounded-md"
                 placeholder="45" min="10" max="120">
        </div>
      </div>

      <button id="calculate-personal" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
        Calculate My Impact
      </button>

      <div id="personal-results" class="hidden mt-4 p-4 bg-white rounded border">
        <div class="grid grid-cols-3 gap-4 text-center">
          <div>
            <div class="text-2xl font-bold text-blue-600" id="personal-weekly">--</div>
            <div class="text-xs text-gray-600">Minutes Lost/Week</div>
          </div>
          <div>
            <div class="text-2xl font-bold text-purple-600" id="personal-semester">--</div>
            <div class="text-xs text-gray-600">Hours Lost/Semester</div>
          </div>
          <div>
            <div class="text-2xl font-bold text-green-600" id="personal-recovery">--</div>
            <div class="text-xs text-gray-600">Hours Recoverable</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  {showComparison && (
    <div id="comparison-section" class="mt-6 bg-white rounded-lg p-6 shadow-sm hidden">
      <h4 class="text-lg font-semibold mb-4">Campus Comparison</h4>
      <div id="comparison-table" class="overflow-x-auto">
        <!-- Comparison table will be populated by JavaScript -->
      </div>
    </div>
  )}
</div>

<script src="https://d3js.org/d3.v7.min.js"></script>

<script>
  class CUNYImpactCalculator {
    constructor() {
      this.campusData = [];
      this.violationData = [];
      this.calculationResults = null;

      // Default calculation parameters
      this.parameters = {
        studyEfficiencyOnBus: 0.65, // 65% efficiency while studying on bus
        hoursPerCredit: 45, // Standard hours per credit hour
        hourlyProductivityValue: 25, // Economic value per study hour
        violationDelayMinutes: 3.5, // Average delay per violation
        semesterWeeks: 15,
        academicDaysPerWeek: 5
      };

      this.init();
    }

    async init() {
      await this.waitForDataLoader();
      await this.loadData();
      this.populateCampusDropdown();
      this.setupEventListeners();
    }

    async waitForDataLoader() {
      return new Promise((resolve) => {
        if (window.ClearLaneData) {
          resolve();
        } else {
          window.addEventListener('clearlane-data-ready', resolve);
        }
      });
    }

    async loadData() {
      try {
        // Load CUNY campus data
        this.campusData = await window.ClearLaneData.loadDataset('CUNY_Insights/campus_summary_2025.csv');

        // Load violation type data
        this.violationData = await window.ClearLaneData.loadDataset('CUNY_Insights/violations_by_type_per_campus_2025.csv');

        console.log('CUNY data loaded:', this.campusData.length, 'campuses');
      } catch (error) {
        console.error('Failed to load CUNY data:', error);
      }
    }

    populateCampusDropdown() {
      const select = document.getElementById('campus-select');

      // Sort campuses by violation count (descending)
      const sortedCampuses = this.campusData
        .filter(c => c.total_violations > 0)
        .sort((a, b) => b.total_violations - a.total_violations);

      sortedCampuses.forEach(campus => {
        const option = document.createElement('option');
        option.value = campus.campus_name;
        option.textContent = `${campus.campus_name} (${campus.total_violations.toLocaleString()} violations)`;
        select.appendChild(option);
      });
    }

    setupEventListeners() {
      document.getElementById('campus-select')?.addEventListener('change', (e) => {
        if (e.target.value === 'custom') {
          document.getElementById('custom-inputs')?.classList.remove('hidden');
        } else {
          document.getElementById('custom-inputs')?.classList.add('hidden');
        }
      });

      document.getElementById('calculate-impact')?.addEventListener('click', () => {
        this.calculateImpact();
      });

      document.getElementById('calculate-personal')?.addEventListener('click', () => {
        this.calculatePersonalImpact();
      });
    }

    calculateImpact() {
      const campus = document.getElementById('campus-select').value;
      const period = document.getElementById('time-period').value;
      const mode = document.getElementById('calculation-mode').value;

      if (campus === 'custom') {
        this.calculateCustomImpact();
      } else if (campus === 'all') {
        this.calculateSystemWideImpact(period, mode);
      } else {
        this.calculateCampusImpact(campus, period, mode);
      }

      this.showResults();
    }

    calculateSystemWideImpact(period, mode) {
      const totalViolations = this.campusData.reduce((sum, c) => sum + c.total_violations, 0);
      const totalRidership = this.campusData.reduce((sum, c) => sum + c.total_ridership, 0);

      // Estimate student population (approximate 270,000 CUNY students)
      const estimatedStudents = 270000;
      const busCommuters = estimatedStudents * 0.35; // ~35% use buses regularly

      this.calculationResults = this.performImpactCalculation({
        violations: totalViolations,
        ridership: totalRidership,
        students: busCommuters,
        period: period,
        mode: mode,
        campusName: 'All CUNY Campuses'
      });
    }

    calculateCampusImpact(campusName, period, mode) {
      const campusInfo = this.campusData.find(c => c.campus_name === campusName);
      if (!campusInfo) return;

      // Estimate student population for specific campus (using ridership as proxy)
      const estimatedStudents = Math.round(campusInfo.total_ridership / 365 / 4); // Rough estimate
      const busCommuters = estimatedStudents * 0.4; // Higher proportion for campuses with violations

      this.calculationResults = this.performImpactCalculation({
        violations: campusInfo.total_violations,
        ridership: campusInfo.total_ridership,
        students: busCommuters,
        period: period,
        mode: mode,
        campusName: campusName
      });
    }

    calculateCustomImpact() {
      const students = parseInt(document.getElementById('student-population').value) || 5000;
      const commuterPercent = parseInt(document.getElementById('daily-commuters').value) || 30;
      const avgCommuteTime = parseInt(document.getElementById('avg-commute-time').value) || 45;
      const studyEfficiency = parseInt(document.getElementById('study-efficiency').value) || 65;

      // Mock violations for custom analysis
      const estimatedViolations = students * commuterPercent / 100 * 0.1; // Rough estimate

      this.calculationResults = this.performImpactCalculation({
        violations: estimatedViolations,
        ridership: students * commuterPercent / 100 * 365 * 2, // Round trips
        students: students * commuterPercent / 100,
        period: 'academic-year',
        mode: 'realistic',
        campusName: 'Custom Analysis',
        customParams: {
          avgCommuteTime: avgCommuteTime,
          studyEfficiency: studyEfficiency / 100
        }
      });
    }

    performImpactCalculation(params) {
      const {
        violations,
        ridership,
        students,
        period,
        mode,
        campusName,
        customParams = {}
      } = params;

      // Apply mode multipliers
      const modeMultipliers = {
        'conservative': 0.5,
        'realistic': 1.0,
        'maximum': 1.8
      };
      const multiplier = modeMultipliers[mode];

      // Calculate base metrics
      const avgCommuteTime = customParams.avgCommuteTime || 45; // minutes
      const studyEfficiency = customParams.studyEfficiency || this.parameters.studyEfficiencyOnBus;

      // Daily calculations
      const dailyViolations = violations / 365;
      const violationsPerCommute = (dailyViolations / (ridership / 365 / 2)) || 0.02; // Per trip

      const delayPerViolation = this.parameters.violationDelayMinutes;
      const dailyDelayMinutes = violationsPerCommute * delayPerViolation * 2 * multiplier; // Round trip

      const studyTimeOnBus = avgCommuteTime * studyEfficiency * 2; // Round trip
      const lostStudyTime = Math.min(dailyDelayMinutes, studyTimeOnBus * 0.3); // Max 30% loss

      // Period adjustments
      const periodMultipliers = {
        'week': 5,
        'month': 22, // Academic days per month
        'semester': 75, // 15 weeks × 5 days
        'academic-year': 150 // 30 weeks × 5 days
      };
      const periodDays = periodMultipliers[period] || periodMultipliers['academic-year'];

      // Final calculations
      const totalLostHours = (lostStudyTime / 60) * periodDays * students;
      const economicCost = totalLostHours * this.parameters.hourlyProductivityValue;
      const academicImpact = totalLostHours / this.parameters.hoursPerCredit;

      return {
        campusName,
        period,
        mode,
        students: Math.round(students),
        dailyDelayMinutes: Math.round(dailyDelayMinutes * 10) / 10,
        lostHoursTotal: Math.round(totalLostHours),
        lostHoursPerStudent: Math.round((totalLostHours / students) * 10) / 10,
        economicCost: Math.round(economicCost),
        academicImpact: Math.round(academicImpact * 10) / 10,
        dailyImpact: {
          morning: Math.round(lostStudyTime / 2 * 10) / 10,
          evening: Math.round(lostStudyTime / 2 * 10) / 10,
          total: Math.round(lostStudyTime * 10) / 10
        },
        semesterImpact: {
          hours: Math.round(totalLostHours / students * periodDays / 150 * 75),
          days: Math.round(totalLostHours / students * periodDays / 150 * 75 / 8),
          credits: Math.round(academicImpact / students * 100) / 100
        },
        recovery: {
          fifty: Math.round(totalLostHours * 0.5),
          seventyFive: Math.round(totalLostHours * 0.75),
          clearLane: Math.round(totalLostHours * 0.85) // Target improvement
        }
      };
    }

    showResults() {
      if (!this.calculationResults) return;

      document.getElementById('results-dashboard').classList.remove('hidden');

      // Update key metrics
      document.getElementById('lost-hours').textContent = this.calculationResults.lostHoursTotal.toLocaleString();
      document.getElementById('affected-students').textContent = this.calculationResults.students.toLocaleString();
      document.getElementById('academic-impact').textContent = this.calculationResults.academicImpact.toFixed(1);
      document.getElementById('economic-cost').textContent = `$${(this.calculationResults.economicCost / 1000).toFixed(0)}k`;

      // Update detailed breakdown
      document.getElementById('morning-loss').textContent = `${this.calculationResults.dailyImpact.morning} min`;
      document.getElementById('evening-loss').textContent = `${this.calculationResults.dailyImpact.evening} min`;
      document.getElementById('daily-total').textContent = `${this.calculationResults.dailyImpact.total} min`;

      document.getElementById('semester-hours').textContent = `${this.calculationResults.semesterImpact.hours}`;
      document.getElementById('study-days').textContent = `${this.calculationResults.semesterImpact.days}`;
      document.getElementById('credit-impact').textContent = `${this.calculationResults.semesterImpact.credits}`;

      document.getElementById('recovery-50').textContent = `+${this.calculationResults.recovery.fifty.toLocaleString()} hours`;
      document.getElementById('recovery-75').textContent = `+${this.calculationResults.recovery.seventyFive.toLocaleString()} hours`;
      document.getElementById('clearlane-target').textContent = `+${this.calculationResults.recovery.clearLane.toLocaleString()} hours`;

      // Render charts
      this.renderCampusChart();
      this.renderTimeDistributionChart();

      // Show comparison if enabled
      if (document.getElementById('comparison-section')) {
        this.showCampusComparison();
      }
    }

    renderCampusChart() {
      const container = d3.select('#campus-chart');
      container.selectAll('*').remove();

      // Get top campuses by violation count
      const topCampuses = this.campusData
        .filter(c => c.total_violations > 0)
        .sort((a, b) => b.total_violations - a.total_violations)
        .slice(0, 10);

      const margin = { top: 20, right: 30, bottom: 40, left: 120 };
      const width = 400 - margin.left - margin.right;
      const height = 240 - margin.top - margin.bottom;

      const svg = container.append('svg')
        .attr('width', width + margin.left + margin.right)
        .attr('height', height + margin.top + margin.bottom);

      const g = svg.append('g')
        .attr('transform', `translate(${margin.left},${margin.top})`);

      const xScale = d3.scaleLinear()
        .domain([0, d3.max(topCampuses, d => d.total_violations)])
        .range([0, width]);

      const yScale = d3.scaleBand()
        .domain(topCampuses.map(d => d.campus_name))
        .range([0, height])
        .padding(0.1);

      // Create bars
      g.selectAll('.bar')
        .data(topCampuses)
        .enter()
        .append('rect')
        .attr('class', 'bar')
        .attr('x', 0)
        .attr('y', d => yScale(d.campus_name))
        .attr('width', d => xScale(d.total_violations))
        .attr('height', yScale.bandwidth())
        .attr('fill', (d, i) => d3.schemeCategory10[i % 10]);

      // Add axes
      g.append('g')
        .attr('transform', `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      g.append('g')
        .call(d3.axisLeft(yScale));
    }

    renderTimeDistributionChart() {
      const container = d3.select('#time-distribution-chart');
      container.selectAll('*').remove();

      if (!this.calculationResults) return;

      // Mock time distribution data
      const timeData = [
        { period: 'Morning Rush', impact: 35, color: '#3b82f6' },
        { period: 'Midday', impact: 20, color: '#10b981' },
        { period: 'Evening Rush', impact: 30, color: '#f59e0b' },
        { period: 'Off-Peak', impact: 15, color: '#6b7280' }
      ];

      const width = 400;
      const height = 240;
      const radius = Math.min(width, height) / 2;

      const svg = container.append('svg')
        .attr('width', width)
        .attr('height', height);

      const g = svg.append('g')
        .attr('transform', `translate(${width/2},${height/2})`);

      const pie = d3.pie()
        .value(d => d.impact);

      const arc = d3.arc()
        .innerRadius(0)
        .outerRadius(radius - 20);

      const arcs = g.selectAll('.arc')
        .data(pie(timeData))
        .enter()
        .append('g')
        .attr('class', 'arc');

      arcs.append('path')
        .attr('d', arc)
        .attr('fill', d => d.data.color);

      arcs.append('text')
        .attr('transform', d => `translate(${arc.centroid(d)})`)
        .attr('text-anchor', 'middle')
        .style('font-size', '12px')
        .text(d => `${d.data.impact}%`);
    }

    calculatePersonalImpact() {
      const route = document.getElementById('personal-route').value;
      const frequency = parseInt(document.getElementById('personal-frequency').value);
      const commuteTime = parseInt(document.getElementById('personal-time').value);

      if (!route || !commuteTime) {
        alert('Please enter your bus route and commute time');
        return;
      }

      // Rough violation estimate based on route
      const estimatedViolationsPerTrip = 0.05; // Conservative estimate
      const weeklyDelayMinutes = estimatedViolationsPerTrip * this.parameters.violationDelayMinutes * frequency * 2;
      const semesterHours = (weeklyDelayMinutes / 60) * 15; // 15 weeks per semester
      const recoverable = semesterHours * 0.8; // 80% recoverable with better enforcement

      // Update personal results
      document.getElementById('personal-weekly').textContent = Math.round(weeklyDelayMinutes);
      document.getElementById('personal-semester').textContent = Math.round(semesterHours);
      document.getElementById('personal-recovery').textContent = Math.round(recoverable);

      document.getElementById('personal-results').classList.remove('hidden');
    }

    showCampusComparison() {
      const comparisonData = this.campusData
        .filter(c => c.total_violations > 0)
        .sort((a, b) => b.total_violations - a.total_violations)
        .slice(0, 10)
        .map(campus => {
          const estimated = this.performImpactCalculation({
            violations: campus.total_violations,
            ridership: campus.total_ridership,
            students: Math.round(campus.total_ridership / 365 / 4),
            period: 'academic-year',
            mode: 'realistic',
            campusName: campus.campus_name
          });

          return {
            campus: campus.campus_name,
            violations: campus.total_violations,
            lostHours: estimated.lostHoursTotal,
            economicCost: estimated.economicCost,
            studentsAffected: estimated.students
          };
        });

      const tableHTML = `
        <table class="min-w-full">
          <thead>
            <tr class="bg-gray-50">
              <th class="px-4 py-2 text-left text-sm font-medium text-gray-900">Campus</th>
              <th class="px-4 py-2 text-right text-sm font-medium text-gray-900">Violations</th>
              <th class="px-4 py-2 text-right text-sm font-medium text-gray-900">Lost Hours</th>
              <th class="px-4 py-2 text-right text-sm font-medium text-gray-900">Economic Cost</th>
            </tr>
          </thead>
          <tbody>
            ${comparisonData.map(row => `
              <tr class="border-t">
                <td class="px-4 py-2 text-sm text-gray-900">${row.campus}</td>
                <td class="px-4 py-2 text-sm text-gray-900 text-right">${row.violations.toLocaleString()}</td>
                <td class="px-4 py-2 text-sm text-gray-900 text-right">${row.lostHours.toLocaleString()}</td>
                <td class="px-4 py-2 text-sm text-gray-900 text-right">$${(row.economicCost / 1000).toFixed(0)}k</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      `;

      document.getElementById('comparison-table').innerHTML = tableHTML;
      document.getElementById('comparison-section').classList.remove('hidden');
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new CUNYImpactCalculator();
  });
</script>

<style>
  /* Chart styles */
  .bar:hover {
    opacity: 0.8;
  }

  .arc:hover {
    opacity: 0.8;
  }

  /* Input styles */
  input:focus, select:focus {
    outline: none;
    ring: 2px;
    ring-color: #3b82f6;
    border-color: #3b82f6;
  }

  /* Animation for results */
  #results-dashboard {
    animation: fadeIn 0.5s ease-in;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Responsive table */
  @media (max-width: 768px) {
    table {
      font-size: 12px;
    }

    th, td {
      padding: 8px 2px;
    }
  }
</style>