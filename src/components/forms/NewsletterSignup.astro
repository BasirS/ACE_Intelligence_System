---
/**
 * Newsletter Signup Component for ClearLane Initiative
 * Simple, accessible email collection with progressive enhancement
 */

export interface Props {
  variant?: 'inline' | 'modal' | 'sidebar' | 'footer';
  size?: 'sm' | 'md' | 'lg';
  title?: string;
  description?: string;
  placeholder?: string;
  buttonText?: string;
  showPrivacy?: boolean;
  class?: string;
}

const {
  variant = 'inline',
  size = 'md',
  title = 'Stay Updated on ClearLane',
  description = 'Get the latest updates on our progress and ways to get involved.',
  placeholder = 'Enter your email address',
  buttonText = 'Subscribe',
  showPrivacy = true,
  class: className = ''
} = Astro.props;

const variantClasses = {
  inline: 'bg-white p-6 rounded-xl border border-gray-200 shadow-sm',
  modal: 'bg-white p-8 rounded-2xl shadow-xl max-w-md mx-auto',
  sidebar: 'bg-gray-50 p-6 rounded-lg',
  footer: 'bg-transparent'
};

const sizeClasses = {
  sm: 'text-sm',
  md: 'text-base',
  lg: 'text-lg'
};

const inputSizes = {
  sm: 'px-3 py-2 text-sm',
  md: 'px-4 py-3 text-base',
  lg: 'px-5 py-4 text-lg'
};

const buttonSizes = {
  sm: 'px-4 py-2 text-sm',
  md: 'px-6 py-3 text-base',
  lg: 'px-8 py-4 text-lg'
};
---

<div class={`newsletter-signup ${variantClasses[variant]} ${sizeClasses[size]} ${className}`}>
  <!-- Header -->
  <div class={`text-center ${variant === 'footer' ? 'text-left' : ''} mb-6`}>
    <h3 class="font-bold text-gray-900 mb-2 flex items-center justify-center gap-2">
      <svg class="w-5 h-5 text-primary" fill="currentColor" viewBox="0 0 24 24">
        <path d="M3 8L10.89 13.26C11.2 13.09 11.54 12.98 11.89 12.98C12.24 12.98 12.58 13.09 12.89 13.26L21 8V6C21 4.9 20.1 4 19 4H5C3.9 4 3 4.9 3 6V8Z"/>
        <path d="M21 10L12.89 15.26C12.58 15.09 12.24 14.98 11.89 14.98C11.54 14.98 11.2 15.09 10.89 15.26L3 10V18C3 19.1 3.9 20 5 20H19C20.1 20 21 19.1 21 18V10Z"/>
      </svg>
      {title}
    </h3>
    <p class="text-gray-600">{description}</p>
  </div>

  <!-- Form -->
  <form
    id="newsletter-form"
    class="newsletter-form"
    novalidate
  >
    <!-- Hidden honeypot field -->
    <div class="hidden" aria-hidden="true">
      <label>
        Don't fill this out:
        <input name="bot-field" type="text" tabindex="-1" autocomplete="off" />
      </label>
    </div>

    <div class="flex flex-col sm:flex-row gap-3">
      <!-- Email Input -->
      <div class="flex-1">
        <label for="newsletter-email" class="sr-only">Email address</label>
        <input
          type="email"
          id="newsletter-email"
          name="email"
          class={`w-full ${inputSizes[size]} border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors`}
          placeholder={placeholder}
          required
          aria-describedby="email-error"
          autocomplete="email"
        />
        <div id="email-error" class="mt-1 text-sm text-red-600 hidden" role="alert"></div>
      </div>

      <!-- Submit Button -->
      <button
        type="submit"
        class={`${buttonSizes[size]} bg-primary text-white font-semibold rounded-lg hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 transition-colors disabled:opacity-50 disabled:cursor-not-allowed whitespace-nowrap`}
        id="newsletter-submit"
      >
        <span class="flex items-center justify-center">
          <span id="newsletter-button-text">{buttonText}</span>
          <svg id="newsletter-spinner" class="hidden animate-spin ml-2 h-4 w-4" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </span>
      </button>
    </div>

    <!-- Success/Error Message -->
    <div id="newsletter-message" class="mt-3 p-3 rounded-lg hidden" role="alert"></div>

    <!-- Privacy Notice -->
    {showPrivacy && (
      <p class="mt-3 text-xs text-gray-500">
        By subscribing, you agree to our
        <a href="/privacy" class="text-primary underline hover:no-underline">Privacy Policy</a>
        and consent to receive updates from ClearLane Initiative. You can unsubscribe at any time.
      </p>
    )}
  </form>

  <!-- Success State -->
  <div id="newsletter-success" class="hidden text-center">
    <div class="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4">
      <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
      </svg>
    </div>
    <h3 class="font-semibold text-gray-900 mb-2">Thanks for subscribing!</h3>
    <p class="text-gray-600">We've sent a confirmation email to verify your subscription.</p>
  </div>
</div>

<style>
  /* Input validation styles */
  .newsletter-form input:invalid:not(:focus):not(:placeholder-shown) {
    border-color: #ef4444;
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }

  .newsletter-form input:valid:not(:focus):not(:placeholder-shown) {
    border-color: #10b981;
  }

  /* Focus enhancements */
  .newsletter-form input:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .newsletter-form input,
    button {
      border-width: 2px;
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .newsletter-form input,
    button {
      transition: none;
    }

    .animate-spin {
      animation: none;
    }
  }

  /* Print styles */
  @media print {
    .newsletter-signup {
      break-inside: avoid;
    }

    button {
      display: none;
    }

    input {
      border: 1px solid black !important;
      background: white !important;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const forms = document.querySelectorAll('.newsletter-form');

    forms.forEach(form => {
      const emailInput = form.querySelector('#newsletter-email') as HTMLInputElement;
      const submitButton = form.querySelector('#newsletter-submit') as HTMLButtonElement;
      const buttonText = form.querySelector('#newsletter-button-text');
      const spinner = form.querySelector('#newsletter-spinner');
      const messageDiv = form.querySelector('#newsletter-message');
      const errorDiv = form.querySelector('#email-error');
      const successDiv = form.querySelector('#newsletter-success');
      const formContainer = form.parentElement;

      if (!emailInput || !submitButton) return;

      // Email validation
      const validateEmail = (email: string): boolean => {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
      };

      const showError = (message: string) => {
        if (errorDiv) {
          errorDiv.textContent = message;
          errorDiv.classList.remove('hidden');
        }
        emailInput.classList.add('border-red-500');
        emailInput.setAttribute('aria-invalid', 'true');
      };

      const clearError = () => {
        if (errorDiv) {
          errorDiv.textContent = '';
          errorDiv.classList.add('hidden');
        }
        emailInput.classList.remove('border-red-500');
        emailInput.setAttribute('aria-invalid', 'false');
      };

      const showMessage = (message: string, type: 'success' | 'error') => {
        if (!messageDiv) return;

        messageDiv.textContent = message;
        messageDiv.className = `mt-3 p-3 rounded-lg ${
          type === 'success'
            ? 'bg-green-50 border border-green-200 text-green-800'
            : 'bg-red-50 border border-red-200 text-red-800'
        }`;
        messageDiv.classList.remove('hidden');

        // Auto-hide after 5 seconds
        setTimeout(() => {
          messageDiv.classList.add('hidden');
        }, 5000);
      };

      // Real-time validation
      emailInput.addEventListener('input', () => {
        clearError();

        const email = emailInput.value.trim();
        if (email && !validateEmail(email)) {
          showError('Please enter a valid email address.');
        }
      });

      emailInput.addEventListener('blur', () => {
        const email = emailInput.value.trim();
        if (email && !validateEmail(email)) {
          showError('Please enter a valid email address.');
        }
      });

      // Form submission
      const handleSubmit = async (e: Event) => {
        e.preventDefault();

        const formData = new FormData(form as HTMLFormElement);
        const email = formData.get('email') as string;

        // Check honeypot
        if (formData.get('bot-field')) {
          console.warn('Bot detected');
          return;
        }

        // Validate email
        clearError();
        if (!email.trim()) {
          showError('Email address is required.');
          emailInput.focus();
          return;
        }

        if (!validateEmail(email)) {
          showError('Please enter a valid email address.');
          emailInput.focus();
          return;
        }

        // Show loading state
        submitButton.disabled = true;
        if (buttonText) buttonText.textContent = 'Subscribing...';
        if (spinner) spinner.classList.remove('hidden');

        try {
          // Simulate API call (replace with actual endpoint)
          const response = await fetch('/api/newsletter-subscribe', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email }),
          });

          if (response.ok) {
            // Success - show success state
            if (successDiv && formContainer) {
              (form as HTMLElement).style.display = 'none';
              successDiv.classList.remove('hidden');
            } else {
              showMessage('Thanks for subscribing! Check your email to confirm.', 'success');
              (form as HTMLFormElement).reset();
            }

            // Analytics tracking
            if (typeof gtag !== 'undefined') {
              gtag('event', 'newsletter_signup', {
                method: 'website_form',
                email_domain: email.split('@')[1]
              });
            }
          } else {
            const data = await response.json().catch(() => ({}));
            const errorMessage = data.message || 'Something went wrong. Please try again.';
            showMessage(errorMessage, 'error');
          }
        } catch (error) {
          console.error('Newsletter signup error:', error);
          showMessage('Network error. Please check your connection and try again.', 'error');
        } finally {
          // Reset button state
          submitButton.disabled = false;
          if (buttonText) buttonText.textContent = 'Subscribe';
          if (spinner) spinner.classList.add('hidden');
        }
      };

      form.addEventListener('submit', handleSubmit);

      // Enter key submission
      emailInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          handleSubmit(e);
        }
      });

      // Paste handling
      emailInput.addEventListener('paste', (e) => {
        setTimeout(() => {
          clearError();
        }, 10);
      });
    });

    // Global newsletter popup trigger (if needed)
    let newsletterPopupShown = false;
    const showNewsletterPopup = () => {
      if (newsletterPopupShown || localStorage.getItem('newsletter-dismissed')) return;

      const popup = document.getElementById('newsletter-popup');
      if (popup) {
        popup.classList.remove('hidden');
        newsletterPopupShown = true;

        // Auto-dismiss after 30 seconds
        setTimeout(() => {
          popup.classList.add('hidden');
        }, 30000);
      }
    };

    // Trigger popup on scroll (80% of page)
    let scrollTriggered = false;
    const handleScroll = () => {
      if (scrollTriggered) return;

      const scrollPercent = (window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100;
      if (scrollPercent > 80) {
        scrollTriggered = true;
        showNewsletterPopup();
      }
    };

    // Trigger popup on exit intent
    const handleMouseLeave = (e: MouseEvent) => {
      if (e.clientY <= 0 && !scrollTriggered) {
        showNewsletterPopup();
      }
    };

    // Event listeners for popup triggers
    window.addEventListener('scroll', handleScroll, { passive: true });
    document.addEventListener('mouseleave', handleMouseLeave);

    // Dismiss popup
    const dismissButtons = document.querySelectorAll('[data-dismiss-newsletter]');
    dismissButtons.forEach(button => {
      button.addEventListener('click', () => {
        const popup = document.getElementById('newsletter-popup');
        if (popup) {
          popup.classList.add('hidden');
          localStorage.setItem('newsletter-dismissed', 'true');
        }
      });
    });
  });
</script>