---
/**
 * Contact Form Component for ClearLane Initiative
 * Accessible form with validation and progressive enhancement
 */

export interface Props {
  variant?: 'default' | 'compact' | 'embedded';
  title?: string;
  description?: string;
  submitText?: string;
  showSubject?: boolean;
  showPhone?: boolean;
  class?: string;
}

const {
  variant = 'default',
  title = 'Get Involved with ClearLane',
  description = 'Join our effort to improve NYC bus enforcement and make commutes safer for everyone.',
  submitText = 'Send Message',
  showSubject = true,
  showPhone = false,
  class: className = ''
} = Astro.props;

const formClasses = {
  default: 'max-w-2xl mx-auto',
  compact: 'max-w-lg',
  embedded: 'w-full'
};
---

<div class={`contact-form ${formClasses[variant]} ${className}`}>
  {variant !== 'embedded' && (
    <div class="text-center mb-8">
      <h2 class="text-3xl font-bold text-gray-900 mb-4">{title}</h2>
      {description && (
        <p class="text-lg text-gray-600 max-w-xl mx-auto">{description}</p>
      )}
    </div>
  )}

  <form
    id="contact-form"
    class="space-y-6 bg-white p-6 sm:p-8 rounded-xl shadow-lg border border-gray-200"
    novalidate
  >
    <!-- Hidden honeypot field for spam protection -->
    <div class="hidden" aria-hidden="true">
      <label>
        Don't fill this out if you're human:
        <input name="honeypot" type="text" tabindex="-1" autocomplete="off" />
      </label>
    </div>

    <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
      <!-- First Name -->
      <div class="form-field">
        <label for="firstName" class="block text-sm font-medium text-gray-700 mb-2">
          First Name <span class="text-red-500" aria-label="required">*</span>
        </label>
        <input
          type="text"
          id="firstName"
          name="firstName"
          required
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
          placeholder="Your first name"
          aria-describedby="firstName-error"
        />
        <div id="firstName-error" class="mt-1 text-sm text-red-600 hidden" role="alert"></div>
      </div>

      <!-- Last Name -->
      <div class="form-field">
        <label for="lastName" class="block text-sm font-medium text-gray-700 mb-2">
          Last Name <span class="text-red-500" aria-label="required">*</span>
        </label>
        <input
          type="text"
          id="lastName"
          name="lastName"
          required
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
          placeholder="Your last name"
          aria-describedby="lastName-error"
        />
        <div id="lastName-error" class="mt-1 text-sm text-red-600 hidden" role="alert"></div>
      </div>
    </div>

    <!-- Email -->
    <div class="form-field">
      <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
        Email Address <span class="text-red-500" aria-label="required">*</span>
      </label>
      <input
        type="email"
        id="email"
        name="email"
        required
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
        placeholder="your.email@example.com"
        aria-describedby="email-error"
      />
      <div id="email-error" class="mt-1 text-sm text-red-600 hidden" role="alert"></div>
    </div>

    <!-- Phone (conditional) -->
    {showPhone && (
      <div class="form-field">
        <label for="phone" class="block text-sm font-medium text-gray-700 mb-2">
          Phone Number <span class="text-gray-400 text-sm">(optional)</span>
        </label>
        <input
          type="tel"
          id="phone"
          name="phone"
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
          placeholder="(555) 123-4567"
          aria-describedby="phone-error"
        />
        <div id="phone-error" class="mt-1 text-sm text-red-600 hidden" role="alert"></div>
      </div>
    )}

    <!-- Subject (conditional) -->
    {showSubject && (
      <div class="form-field">
        <label for="subject" class="block text-sm font-medium text-gray-700 mb-2">
          Subject <span class="text-red-500" aria-label="required">*</span>
        </label>
        <select
          id="subject"
          name="subject"
          required
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
          aria-describedby="subject-error"
        >
          <option value="">Select a topic</option>
          <option value="general">General Inquiry</option>
          <option value="partnership">Partnership Opportunity</option>
          <option value="data">Data Access Request</option>
          <option value="policy">Policy Advocacy</option>
          <option value="media">Media Inquiry</option>
          <option value="technical">Technical Question</option>
          <option value="other">Other</option>
        </select>
        <div id="subject-error" class="mt-1 text-sm text-red-600 hidden" role="alert"></div>
      </div>
    )}

    <!-- Message -->
    <div class="form-field">
      <label for="message" class="block text-sm font-medium text-gray-700 mb-2">
        Message <span class="text-red-500" aria-label="required">*</span>
      </label>
      <textarea
        id="message"
        name="message"
        required
        rows="6"
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors resize-vertical"
        placeholder="Tell us about your interest in ClearLane or how you'd like to get involved..."
        aria-describedby="message-error message-hint"
      ></textarea>
      <div id="message-hint" class="mt-1 text-sm text-gray-500">
        Minimum 10 characters. Please be specific about your inquiry.
      </div>
      <div id="message-error" class="mt-1 text-sm text-red-600 hidden" role="alert"></div>
    </div>

    <!-- Interest Areas -->
    <div class="form-field">
      <fieldset>
        <legend class="block text-sm font-medium text-gray-700 mb-3">
          Areas of Interest <span class="text-gray-400 text-sm">(check all that apply)</span>
        </legend>
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
          <label class="flex items-center">
            <input
              type="checkbox"
              name="interests"
              value="data-analysis"
              class="rounded border-gray-300 text-primary focus:ring-primary focus:ring-offset-0"
            />
            <span class="ml-2 text-sm text-gray-700">Data Analysis</span>
          </label>
          <label class="flex items-center">
            <input
              type="checkbox"
              name="interests"
              value="policy-advocacy"
              class="rounded border-gray-300 text-primary focus:ring-primary focus:ring-offset-0"
            />
            <span class="ml-2 text-sm text-gray-700">Policy Advocacy</span>
          </label>
          <label class="flex items-center">
            <input
              type="checkbox"
              name="interests"
              value="community-outreach"
              class="rounded border-gray-300 text-primary focus:ring-primary focus:ring-offset-0"
            />
            <span class="ml-2 text-sm text-gray-700">Community Outreach</span>
          </label>
          <label class="flex items-center">
            <input
              type="checkbox"
              name="interests"
              value="technical-development"
              class="rounded border-gray-300 text-primary focus:ring-primary focus:ring-offset-0"
            />
            <span class="ml-2 text-sm text-gray-700">Technical Development</span>
          </label>
        </div>
      </fieldset>
    </div>

    <!-- Newsletter Signup -->
    <div class="form-field">
      <label class="flex items-start">
        <input
          type="checkbox"
          name="newsletter"
          value="yes"
          class="mt-1 rounded border-gray-300 text-primary focus:ring-primary focus:ring-offset-0"
        />
        <span class="ml-2 text-sm text-gray-700">
          I'd like to receive updates about ClearLane initiative progress and ways to get involved.
          <a href="/privacy" class="text-primary underline hover:no-underline">Privacy Policy</a>
        </span>
      </label>
    </div>

    <!-- Submit Button -->
    <div class="pt-4">
      <button
        type="submit"
        class="w-full sm:w-auto px-8 py-3 bg-primary text-white font-semibold rounded-lg hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        id="submit-button"
      >
        <span class="flex items-center justify-center">
          <span id="button-text">{submitText}</span>
          <svg id="loading-spinner" class="hidden animate-spin ml-2 h-5 w-5" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </span>
      </button>
    </div>

    <!-- Success/Error Messages -->
    <div id="form-message" class="hidden p-4 rounded-lg" role="alert"></div>
  </form>
</div>

<style>
  /* Form field transitions */
  .form-field input,
  .form-field select,
  .form-field textarea {
    transition: border-color 0.2s, box-shadow 0.2s;
  }

  .form-field input:invalid:not(:focus):not(:placeholder-shown),
  .form-field select:invalid:not(:focus),
  .form-field textarea:invalid:not(:focus):not(:placeholder-shown) {
    border-color: #ef4444;
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }

  .form-field input:valid:not(:focus):not(:placeholder-shown),
  .form-field select:valid:not(:focus),
  .form-field textarea:valid:not(:focus):not(:placeholder-shown) {
    border-color: #10b981;
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .form-field input,
    .form-field select,
    .form-field textarea {
      border-width: 2px;
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .form-field input,
    .form-field select,
    .form-field textarea,
    button {
      transition: none;
    }

    .animate-spin {
      animation: none;
    }
  }

  /* Print styles */
  @media print {
    .contact-form {
      break-inside: avoid;
    }

    button {
      display: none;
    }

    input,
    select,
    textarea {
      border: 1px solid black !important;
      background: white !important;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
    const buttonText = document.getElementById('button-text');
    const loadingSpinner = document.getElementById('loading-spinner');
    const formMessage = document.getElementById('form-message');

    if (!form || !submitButton) return;

    // Validation patterns
    const validationRules = {
      firstName: {
        required: true,
        minLength: 2,
        pattern: /^[a-zA-Z\s'-]+$/,
        message: 'Please enter a valid first name (letters, spaces, hyphens, and apostrophes only).'
      },
      lastName: {
        required: true,
        minLength: 2,
        pattern: /^[a-zA-Z\s'-]+$/,
        message: 'Please enter a valid last name (letters, spaces, hyphens, and apostrophes only).'
      },
      email: {
        required: true,
        pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
        message: 'Please enter a valid email address.'
      },
      phone: {
        required: false,
        pattern: /^[\+]?[\d\s\-\(\)\.]+$/,
        message: 'Please enter a valid phone number.'
      },
      subject: {
        required: true,
        message: 'Please select a subject.'
      },
      message: {
        required: true,
        minLength: 10,
        maxLength: 2000,
        message: 'Message must be between 10 and 2000 characters.'
      }
    };

    // Validation functions
    const showError = (fieldName: string, message: string) => {
      const errorElement = document.getElementById(`${fieldName}-error`);
      const field = document.getElementById(fieldName) as HTMLInputElement;

      if (errorElement && field) {
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
        field.classList.add('border-red-500');
        field.setAttribute('aria-invalid', 'true');
      }
    };

    const clearError = (fieldName: string) => {
      const errorElement = document.getElementById(`${fieldName}-error`);
      const field = document.getElementById(fieldName) as HTMLInputElement;

      if (errorElement && field) {
        errorElement.textContent = '';
        errorElement.classList.add('hidden');
        field.classList.remove('border-red-500');
        field.setAttribute('aria-invalid', 'false');
      }
    };

    const validateField = (fieldName: string, value: string): boolean => {
      const rules = validationRules[fieldName as keyof typeof validationRules];
      if (!rules) return true;

      clearError(fieldName);

      // Required check
      if (rules.required && !value.trim()) {
        showError(fieldName, `${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)} is required.`);
        return false;
      }

      // Skip other validations if field is empty and not required
      if (!rules.required && !value.trim()) return true;

      // Length checks
      if (rules.minLength && value.length < rules.minLength) {
        showError(fieldName, `${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)} must be at least ${rules.minLength} characters.`);
        return false;
      }

      if (rules.maxLength && value.length > rules.maxLength) {
        showError(fieldName, `${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)} must not exceed ${rules.maxLength} characters.`);
        return false;
      }

      // Pattern check
      if (rules.pattern && !rules.pattern.test(value)) {
        showError(fieldName, rules.message);
        return false;
      }

      return true;
    };

    // Real-time validation
    Object.keys(validationRules).forEach(fieldName => {
      const field = document.getElementById(fieldName) as HTMLInputElement;
      if (!field) return;

      const validateOnEvent = () => {
        validateField(fieldName, field.value);
      };

      field.addEventListener('blur', validateOnEvent);
      field.addEventListener('input', () => {
        // Clear errors on input, validate on pause
        clearError(fieldName);
        clearTimeout((field as any).validationTimeout);
        (field as any).validationTimeout = setTimeout(validateOnEvent, 1000);
      });
    });

    // Form submission
    const handleSubmit = async (e: Event) => {
      e.preventDefault();

      // Validate all fields
      const formData = new FormData(form);
      let isValid = true;

      // Check honeypot
      if (formData.get('honeypot')) {
        console.warn('Spam detected');
        return;
      }

      // Validate required fields
      Object.keys(validationRules).forEach(fieldName => {
        const value = formData.get(fieldName) as string || '';
        if (!validateField(fieldName, value)) {
          isValid = false;
        }
      });

      if (!isValid) {
        // Focus first error field
        const firstError = form.querySelector('.border-red-500') as HTMLElement;
        if (firstError) {
          firstError.focus();
          firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
        return;
      }

      // Show loading state
      submitButton.disabled = true;
      if (buttonText) buttonText.textContent = 'Sending...';
      if (loadingSpinner) {
        loadingSpinner.classList.remove('hidden');
      }

      try {
        // Simulate API call (replace with actual endpoint)
        const response = await fetch('/api/contact', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(Object.fromEntries(formData)),
        });

        if (response.ok) {
          // Success
          if (formMessage) {
            formMessage.className = 'p-4 rounded-lg bg-green-50 border border-green-200 text-green-800';
            formMessage.textContent = 'Thank you for your message! We\'ll get back to you soon.';
            formMessage.classList.remove('hidden');
          }

          // Reset form
          form.reset();

          // Analytics tracking
          if (typeof gtag !== 'undefined') {
            gtag('event', 'form_submit', {
              form_name: 'contact_form',
              subject: formData.get('subject'),
              interests: formData.getAll('interests')
            });
          }
        } else {
          throw new Error('Network response was not ok');
        }
      } catch (error) {
        // Error
        if (formMessage) {
          formMessage.className = 'p-4 rounded-lg bg-red-50 border border-red-200 text-red-800';
          formMessage.textContent = 'Sorry, there was an error sending your message. Please try again.';
          formMessage.classList.remove('hidden');
        }

        console.error('Form submission error:', error);
      } finally {
        // Reset button state
        submitButton.disabled = false;
        if (buttonText) buttonText.textContent = 'Send Message';
        if (loadingSpinner) {
          loadingSpinner.classList.add('hidden');
        }
      }
    };

    form.addEventListener('submit', handleSubmit);

    // Accessibility improvements
    form.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && e.target !== form.querySelector('textarea')) {
        e.preventDefault();
        handleSubmit(e);
      }
    });

    // Character count for message field
    const messageField = document.getElementById('message') as HTMLTextAreaElement;
    const messageHint = document.getElementById('message-hint');

    if (messageField && messageHint) {
      const updateCharacterCount = () => {
        const length = messageField.value.length;
        const maxLength = validationRules.message.maxLength || 2000;
        const remaining = maxLength - length;

        if (remaining < 100) {
          messageHint.textContent = `${remaining} characters remaining`;
          messageHint.className = remaining < 0 ? 'mt-1 text-sm text-red-500' : 'mt-1 text-sm text-yellow-600';
        } else {
          messageHint.textContent = 'Minimum 10 characters. Please be specific about your inquiry.';
          messageHint.className = 'mt-1 text-sm text-gray-500';
        }
      };

      messageField.addEventListener('input', updateCharacterCount);
    }
  });
</script>