---
// Accessibility Enhancer - WCAG 2.1 AA compliance for all interactive components
// Provides keyboard navigation, screen reader support, and progressive enhancement
export interface AccessibilityProps {
  skipLinksEnabled?: boolean;
  screenReaderAnnouncements?: boolean;
  keyboardNavigation?: boolean;
  highContrastMode?: boolean;
}

interface Props extends AccessibilityProps {}

const {
  skipLinksEnabled = true,
  screenReaderAnnouncements = true,
  keyboardNavigation = true,
  highContrastMode = true
} = Astro.props;
---

<!-- Skip Links for Screen Readers -->
{skipLinksEnabled && (
  <div id="skip-links" class="sr-only focus-within:not-sr-only fixed top-0 left-0 z-50 bg-blue-600 text-white p-2 rounded-br-lg">
    <a href="#main-content" class="skip-link">Skip to main content</a>
    <a href="#navigation" class="skip-link ml-4">Skip to navigation</a>
    <a href="#data-visualizations" class="skip-link ml-4">Skip to data visualizations</a>
  </div>
)}

<!-- Live Region for Screen Reader Announcements -->
{screenReaderAnnouncements && (
  <div id="sr-live-region" class="sr-only" aria-live="polite" aria-atomic="true">
    <!-- Screen reader announcements will be inserted here -->
  </div>
)}

<!-- Accessibility Controls Panel -->
<div id="accessibility-controls" class="fixed bottom-4 right-4 z-40 bg-white shadow-lg rounded-lg border border-gray-300">
  <button id="accessibility-toggle"
          class="p-3 text-gray-700 hover:text-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
          aria-label="Open accessibility controls"
          aria-expanded="false">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
    </svg>
  </button>

  <div id="accessibility-panel" class="hidden absolute bottom-16 right-0 w-80 bg-white border border-gray-300 rounded-lg shadow-xl p-4">
    <h3 class="text-lg font-semibold mb-4">Accessibility Options</h3>

    <div class="space-y-4">
      <!-- High Contrast Toggle -->
      {highContrastMode && (
        <div class="flex items-center justify-between">
          <label for="high-contrast" class="text-sm font-medium text-gray-700">
            High Contrast Mode
          </label>
          <button id="high-contrast" role="switch"
                  class="relative inline-flex h-6 w-11 items-center rounded-full bg-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                  aria-checked="false">
            <span class="sr-only">Enable high contrast mode</span>
            <span class="inline-block h-4 w-4 transform rounded-full bg-white shadow transition-transform"></span>
          </button>
        </div>
      )}

      <!-- Font Size Controls -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-2">Font Size</label>
        <div class="flex gap-2">
          <button id="font-decrease" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
            A-
          </button>
          <button id="font-reset" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
            A
          </button>
          <button id="font-increase" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
            A+
          </button>
        </div>
      </div>

      <!-- Animation Controls -->
      <div class="flex items-center justify-between">
        <label for="reduce-motion" class="text-sm font-medium text-gray-700">
          Reduce Motion
        </label>
        <button id="reduce-motion" role="switch"
                class="relative inline-flex h-6 w-11 items-center rounded-full bg-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                aria-checked="false">
          <span class="sr-only">Reduce animations and motion</span>
          <span class="inline-block h-4 w-4 transform rounded-full bg-white shadow transition-transform"></span>
        </button>
      </div>

      <!-- Keyboard Navigation Info -->
      {keyboardNavigation && (
        <div>
          <button id="keyboard-help" class="text-sm text-blue-600 hover:text-blue-800 underline focus:outline-none focus:ring-2 focus:ring-blue-500">
            View keyboard shortcuts
          </button>
        </div>
      )}
    </div>
  </div>
</div>

<!-- Keyboard Navigation Help Modal -->
{keyboardNavigation && (
  <div id="keyboard-help-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50" role="dialog" aria-labelledby="keyboard-help-title" aria-modal="true">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-screen overflow-y-auto" role="document">
        <div class="p-6">
          <div class="flex justify-between items-start mb-4">
            <h2 id="keyboard-help-title" class="text-xl font-bold">Keyboard Navigation</h2>
            <button id="close-keyboard-help" class="text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    aria-label="Close keyboard help">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>

          <div class="space-y-6">
            <div>
              <h3 class="text-lg font-semibold mb-3">General Navigation</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div class="flex justify-between">
                  <span class="font-medium">Tab</span>
                  <span>Move forward</span>
                </div>
                <div class="flex justify-between">
                  <span class="font-medium">Shift + Tab</span>
                  <span>Move backward</span>
                </div>
                <div class="flex justify-between">
                  <span class="font-medium">Enter/Space</span>
                  <span>Activate element</span>
                </div>
                <div class="flex justify-between">
                  <span class="font-medium">Escape</span>
                  <span>Close modal/menu</span>
                </div>
              </div>
            </div>

            <div>
              <h3 class="text-lg font-semibold mb-3">Data Visualizations</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div class="flex justify-between">
                  <span class="font-medium">Arrow Keys</span>
                  <span>Navigate data points</span>
                </div>
                <div class="flex justify-between">
                  <span class="font-medium">Home/End</span>
                  <span>First/last data point</span>
                </div>
                <div class="flex justify-between">
                  <span class="font-medium">Page Up/Down</span>
                  <span>Navigate by group</span>
                </div>
                <div class="flex justify-between">
                  <span class="font-medium">F</span>
                  <span>Toggle filters</span>
                </div>
              </div>
            </div>

            <div>
              <h3 class="text-lg font-semibold mb-3">Interactive Maps</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div class="flex justify-between">
                  <span class="font-medium">+/- Keys</span>
                  <span>Zoom in/out</span>
                </div>
                <div class="flex justify-between">
                  <span class="font-medium">Arrow Keys</span>
                  <span>Pan map</span>
                </div>
                <div class="flex justify-between">
                  <span class="font-medium">M</span>
                  <span>Toggle map layers</span>
                </div>
                <div class="flex justify-between">
                  <span class="font-medium">L</span>
                  <span>Toggle legend</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
)}

<script>
  class AccessibilityEnhancer {
    constructor() {
      this.settings = {
        highContrast: false,
        fontSize: 100, // percentage
        reduceMotion: false
      };

      this.focusableElements = [
        'a[href]',
        'button:not([disabled])',
        'input:not([disabled])',
        'select:not([disabled])',
        'textarea:not([disabled])',
        '[tabindex]:not([tabindex="-1"])',
        '[role="button"]',
        '[role="link"]'
      ].join(', ');

      this.init();
    }

    init() {
      this.loadSettings();
      this.setupEventListeners();
      this.setupKeyboardNavigation();
      this.setupFocusManagement();
      this.setupScreenReaderSupport();
      this.applySettings();

      // Check for prefers-reduced-motion
      if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
        this.settings.reduceMotion = true;
        this.applyReducedMotion();
      }
    }

    loadSettings() {
      const saved = localStorage.getItem('clearlane-accessibility-settings');
      if (saved) {
        this.settings = { ...this.settings, ...JSON.parse(saved) };
      }
    }

    saveSettings() {
      localStorage.setItem('clearlane-accessibility-settings', JSON.stringify(this.settings));
    }

    setupEventListeners() {
      // Accessibility panel toggle
      document.getElementById('accessibility-toggle')?.addEventListener('click', () => {
        this.toggleAccessibilityPanel();
      });

      // High contrast toggle
      document.getElementById('high-contrast')?.addEventListener('click', () => {
        this.toggleHighContrast();
      });

      // Font size controls
      document.getElementById('font-decrease')?.addEventListener('click', () => {
        this.adjustFontSize(-10);
      });

      document.getElementById('font-reset')?.addEventListener('click', () => {
        this.resetFontSize();
      });

      document.getElementById('font-increase')?.addEventListener('click', () => {
        this.adjustFontSize(10);
      });

      // Reduce motion toggle
      document.getElementById('reduce-motion')?.addEventListener('click', () => {
        this.toggleReduceMotion();
      });

      // Keyboard help
      document.getElementById('keyboard-help')?.addEventListener('click', () => {
        this.showKeyboardHelp();
      });

      document.getElementById('close-keyboard-help')?.addEventListener('click', () => {
        this.hideKeyboardHelp();
      });

      // Close panels with Escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.closeAllPanels();
        }
      });

      // Focus trapping for modals
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Tab') {
          this.handleTabNavigation(e);
        }
      });
    }

    setupKeyboardNavigation() {
      // Add keyboard support for interactive visualizations
      document.addEventListener('keydown', (e) => {
        const activeElement = document.activeElement;

        // Skip if user is typing in an input
        if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') {
          return;
        }

        switch(e.key) {
          case 'f':
          case 'F':
            if (e.ctrlKey) return; // Don't interfere with Ctrl+F
            this.toggleFilters();
            e.preventDefault();
            break;

          case 'm':
          case 'M':
            this.toggleMapLayers();
            e.preventDefault();
            break;

          case 'l':
          case 'L':
            this.toggleLegend();
            e.preventDefault();
            break;

          case '?':
            this.showKeyboardHelp();
            e.preventDefault();
            break;
        }
      });
    }

    setupFocusManagement() {
      // Enhance focus visibility
      const style = document.createElement('style');
      style.textContent = `
        *:focus-visible {
          outline: 3px solid #3b82f6 !important;
          outline-offset: 2px !important;
        }

        .focus-trap {
          position: relative;
        }

        .skip-link {
          position: absolute;
          left: -10000px;
          top: auto;
          width: 1px;
          height: 1px;
          overflow: hidden;
        }

        .skip-link:focus {
          position: static;
          width: auto;
          height: auto;
        }
      `;
      document.head.appendChild(style);

      // Add focus indicators to interactive elements
      this.enhanceFocusIndicators();
    }

    setupScreenReaderSupport() {
      // Add ARIA labels and descriptions to data visualizations
      this.addVisualizationAria();

      // Set up live region updates
      this.setupLiveRegion();
    }

    addVisualizationAria() {
      // Add ARIA labels to charts and maps
      const charts = document.querySelectorAll('[id*="chart"], [id*="map"], [id*="visualization"]');

      charts.forEach((chart, index) => {
        if (!chart.getAttribute('role')) {
          chart.setAttribute('role', 'img');
        }

        if (!chart.getAttribute('aria-label')) {
          const title = chart.querySelector('h3, h4, .chart-title')?.textContent ||
                       `Data visualization ${index + 1}`;
          chart.setAttribute('aria-label', title);
        }

        // Add description for complex charts
        const description = this.generateChartDescription(chart);
        if (description) {
          const descId = `chart-desc-${index}`;
          const descElement = document.createElement('div');
          descElement.id = descId;
          descElement.className = 'sr-only';
          descElement.textContent = description;
          chart.appendChild(descElement);
          chart.setAttribute('aria-describedby', descId);
        }
      });
    }

    generateChartDescription(chart) {
      // Generate appropriate descriptions based on chart type
      if (chart.id.includes('temporal')) {
        return 'Interactive chart showing violation patterns over time. Use arrow keys to navigate data points.';
      } else if (chart.id.includes('map')) {
        return 'Interactive map showing violation hotspots across NYC. Use plus and minus keys to zoom, arrow keys to pan.';
      } else if (chart.id.includes('cuny')) {
        return 'Analysis of violations affecting CUNY campuses. Data can be filtered by campus and time period.';
      }
      return 'Interactive data visualization. Use Tab to navigate controls and arrow keys for data exploration.';
    }

    setupLiveRegion() {
      this.liveRegion = document.getElementById('sr-live-region');

      // Listen for data updates and announce them
      document.addEventListener('data-updated', (e) => {
        if (this.liveRegion) {
          this.announceToScreenReader(e.detail.message);
        }
      });
    }

    announceToScreenReader(message) {
      if (this.liveRegion) {
        this.liveRegion.textContent = message;
        // Clear after announcement
        setTimeout(() => {
          this.liveRegion.textContent = '';
        }, 1000);
      }
    }

    enhanceFocusIndicators() {
      // Add custom focus indicators for data points
      const interactiveElements = document.querySelectorAll('.data-point, .marker, .bar, .dot');

      interactiveElements.forEach(element => {
        if (!element.getAttribute('tabindex')) {
          element.setAttribute('tabindex', '0');
        }

        element.addEventListener('focus', () => {
          this.highlightDataPoint(element);
        });

        element.addEventListener('blur', () => {
          this.unhighlightDataPoint(element);
        });
      });
    }

    highlightDataPoint(element) {
      element.style.outline = '3px solid #3b82f6';
      element.style.outlineOffset = '2px';

      // Announce data point info to screen readers
      const info = this.getDataPointInfo(element);
      if (info) {
        this.announceToScreenReader(info);
      }
    }

    unhighlightDataPoint(element) {
      element.style.outline = '';
      element.style.outlineOffset = '';
    }

    getDataPointInfo(element) {
      // Extract meaningful information from data points
      const title = element.getAttribute('title') ||
                   element.getAttribute('aria-label') ||
                   element.dataset.info;

      if (title) return title;

      // Try to construct info from nearby text
      const textContent = element.textContent?.trim();
      if (textContent) return textContent;

      return null;
    }

    toggleAccessibilityPanel() {
      const panel = document.getElementById('accessibility-panel');
      const toggle = document.getElementById('accessibility-toggle');
      const isOpen = !panel.classList.contains('hidden');

      if (isOpen) {
        panel.classList.add('hidden');
        toggle.setAttribute('aria-expanded', 'false');
      } else {
        panel.classList.remove('hidden');
        toggle.setAttribute('aria-expanded', 'true');

        // Focus first control in panel
        const firstControl = panel.querySelector('button, input, select');
        if (firstControl) {
          firstControl.focus();
        }
      }
    }

    toggleHighContrast() {
      this.settings.highContrast = !this.settings.highContrast;
      this.applyHighContrast();
      this.updateToggleState('high-contrast', this.settings.highContrast);
      this.saveSettings();

      this.announceToScreenReader(
        this.settings.highContrast ? 'High contrast mode enabled' : 'High contrast mode disabled'
      );
    }

    applyHighContrast() {
      if (this.settings.highContrast) {
        document.documentElement.classList.add('high-contrast');

        // Add high contrast styles
        const style = document.createElement('style');
        style.id = 'high-contrast-styles';
        style.textContent = `
          .high-contrast {
            filter: contrast(150%) brightness(120%);
          }

          .high-contrast * {
            border-color: #000 !important;
          }

          .high-contrast button,
          .high-contrast a {
            background: #000 !important;
            color: #fff !important;
            border: 2px solid #fff !important;
          }

          .high-contrast input,
          .high-contrast select,
          .high-contrast textarea {
            background: #fff !important;
            color: #000 !important;
            border: 2px solid #000 !important;
          }
        `;
        document.head.appendChild(style);
      } else {
        document.documentElement.classList.remove('high-contrast');
        const existingStyles = document.getElementById('high-contrast-styles');
        if (existingStyles) {
          existingStyles.remove();
        }
      }
    }

    adjustFontSize(change) {
      this.settings.fontSize = Math.max(80, Math.min(150, this.settings.fontSize + change));
      this.applyFontSize();
      this.saveSettings();

      this.announceToScreenReader(`Font size ${this.settings.fontSize}%`);
    }

    resetFontSize() {
      this.settings.fontSize = 100;
      this.applyFontSize();
      this.saveSettings();

      this.announceToScreenReader('Font size reset to default');
    }

    applyFontSize() {
      document.documentElement.style.fontSize = `${this.settings.fontSize}%`;
    }

    toggleReduceMotion() {
      this.settings.reduceMotion = !this.settings.reduceMotion;
      this.applyReducedMotion();
      this.updateToggleState('reduce-motion', this.settings.reduceMotion);
      this.saveSettings();

      this.announceToScreenReader(
        this.settings.reduceMotion ? 'Reduced motion enabled' : 'Reduced motion disabled'
      );
    }

    applyReducedMotion() {
      if (this.settings.reduceMotion) {
        const style = document.createElement('style');
        style.id = 'reduced-motion-styles';
        style.textContent = `
          *, *::before, *::after {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
            scroll-behavior: auto !important;
          }
        `;
        document.head.appendChild(style);
      } else {
        const existingStyles = document.getElementById('reduced-motion-styles');
        if (existingStyles) {
          existingStyles.remove();
        }
      }
    }

    updateToggleState(toggleId, state) {
      const toggle = document.getElementById(toggleId);
      if (!toggle) return;

      const thumb = toggle.querySelector('span:last-child');

      if (state) {
        toggle.classList.remove('bg-gray-200');
        toggle.classList.add('bg-blue-600');
        toggle.setAttribute('aria-checked', 'true');
        if (thumb) {
          thumb.classList.add('translate-x-5');
        }
      } else {
        toggle.classList.remove('bg-blue-600');
        toggle.classList.add('bg-gray-200');
        toggle.setAttribute('aria-checked', 'false');
        if (thumb) {
          thumb.classList.remove('translate-x-5');
        }
      }
    }

    showKeyboardHelp() {
      document.getElementById('keyboard-help-modal')?.classList.remove('hidden');

      // Focus the close button
      const closeButton = document.getElementById('close-keyboard-help');
      if (closeButton) {
        closeButton.focus();
      }
    }

    hideKeyboardHelp() {
      document.getElementById('keyboard-help-modal')?.classList.add('hidden');

      // Return focus to the help trigger
      const helpButton = document.getElementById('keyboard-help');
      if (helpButton) {
        helpButton.focus();
      }
    }

    closeAllPanels() {
      document.getElementById('accessibility-panel')?.classList.add('hidden');
      document.getElementById('keyboard-help-modal')?.classList.add('hidden');

      const toggle = document.getElementById('accessibility-toggle');
      if (toggle) {
        toggle.setAttribute('aria-expanded', 'false');
      }
    }

    handleTabNavigation(e) {
      const modals = document.querySelectorAll('[role="dialog"]:not(.hidden)');

      if (modals.length === 0) return;

      const modal = modals[0];
      const focusableElements = modal.querySelectorAll(this.focusableElements);
      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];

      if (e.shiftKey && document.activeElement === firstElement) {
        e.preventDefault();
        lastElement.focus();
      } else if (!e.shiftKey && document.activeElement === lastElement) {
        e.preventDefault();
        firstElement.focus();
      }
    }

    // Helper methods for keyboard shortcuts
    toggleFilters() {
      const filterButton = document.querySelector('[data-filter-toggle], #filter-controls button');
      if (filterButton) {
        filterButton.click();
        this.announceToScreenReader('Filters toggled');
      }
    }

    toggleMapLayers() {
      const layerToggle = document.querySelector('[data-layer-toggle], .leaflet-control-layers-toggle');
      if (layerToggle) {
        layerToggle.click();
        this.announceToScreenReader('Map layers toggled');
      }
    }

    toggleLegend() {
      const legend = document.querySelector('#map-legend, .legend');
      if (legend) {
        legend.classList.toggle('hidden');
        this.announceToScreenReader(
          legend.classList.contains('hidden') ? 'Legend hidden' : 'Legend shown'
        );
      }
    }

    applySettings() {
      if (this.settings.highContrast) {
        this.applyHighContrast();
        this.updateToggleState('high-contrast', true);
      }

      if (this.settings.fontSize !== 100) {
        this.applyFontSize();
      }

      if (this.settings.reduceMotion) {
        this.applyReducedMotion();
        this.updateToggleState('reduce-motion', true);
      }
    }
  }

  // Initialize accessibility enhancer
  document.addEventListener('DOMContentLoaded', () => {
    new AccessibilityEnhancer();
  });
</script>

<style>
  /* Screen reader only class */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Focus-within makes sr-only content visible when focused */
  .focus-within\:not-sr-only:focus-within {
    position: static;
    width: auto;
    height: auto;
    padding: inherit;
    margin: inherit;
    overflow: visible;
    clip: auto;
    white-space: normal;
  }

  /* Enhanced focus styles */
  *:focus-visible {
    outline: 3px solid #3b82f6;
    outline-offset: 2px;
  }

  /* Skip link styles */
  .skip-link {
    padding: 8px 16px;
    background: #3b82f6;
    color: white;
    text-decoration: none;
    border-radius: 0 0 4px 0;
    font-weight: 500;
  }

  .skip-link:hover,
  .skip-link:focus {
    background: #1d4ed8;
  }

  /* Accessibility panel animations */
  #accessibility-panel {
    transition: opacity 0.2s ease, transform 0.2s ease;
  }

  #accessibility-panel.hidden {
    opacity: 0;
    transform: translateY(10px);
    pointer-events: none;
  }

  /* Toggle switch animations */
  .toggle-switch span:last-child {
    transition: transform 0.2s ease;
  }

  /* High contrast mode preparations */
  .high-contrast-ready {
    border: 1px solid transparent;
    transition: all 0.2s ease;
  }

  /* Reduced motion class */
  .reduce-motion * {
    animation-duration: 0.01ms !important;
    transition-duration: 0.01ms !important;
  }
</style>