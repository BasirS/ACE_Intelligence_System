---
/**
 * Base Chart Component for ClearLane Initiative
 * Provides accessible, responsive foundation for all visualizations
 */

export interface Props {
  id: string;
  title: string;
  description?: string;
  width?: string;
  height?: string;
  loading?: boolean;
  error?: string;
  fallbackImage?: string;
  className?: string;
}

const {
  id,
  title,
  description,
  width = "100%",
  height = "400px",
  loading = false,
  error,
  fallbackImage,
  className = "",
} = Astro.props;

const chartId = `chart-${id}`;
const tableId = `table-${id}`;
---

<div class={`chart-container ${className}`} data-chart-id={id}>
  <!-- Screen reader accessible title -->
  <h3 id={`${chartId}-title`} class="chart-title">
    {title}
  </h3>

  {description && (
    <p id={`${chartId}-desc`} class="chart-description">
      {description}
    </p>
  )}

  <!-- Loading state -->
  {loading && (
    <div class="chart-loading" aria-label="Loading chart data">
      <div class="loading-spinner"></div>
      <span class="sr-only">Loading {title} visualization</span>
    </div>
  )}

  <!-- Error state -->
  {error && (
    <div class="chart-error" role="alert">
      <p>Error loading chart: {error}</p>
      {fallbackImage && (
        <img
          src={fallbackImage}
          alt={`Static version of ${title}`}
          class="fallback-image"
        />
      )}
    </div>
  )}

  <!-- Chart container with fallback -->
  {!loading && !error && (
    <div class="chart-wrapper">
      <!-- Fallback static image for no-JS users -->
      {fallbackImage && (
        <img
          src={fallbackImage}
          alt={description || title}
          class="chart-fallback"
          style={`width: ${width}; height: ${height};`}
        />
      )}

      <!-- Interactive chart canvas -->
      <div
        id={chartId}
        class="chart-canvas"
        role="img"
        aria-labelledby={`${chartId}-title`}
        aria-describedby={description ? `${chartId}-desc` : undefined}
        style={`width: ${width}; height: ${height};`}
        data-interactive="true"
      >
        <slot />
      </div>
    </div>
  )}

  <!-- Accessible data table alternative -->
  <details class="chart-data-table">
    <summary class="table-toggle">
      View data as table
      <span class="toggle-icon" aria-hidden="true">â–¼</span>
    </summary>
    <div id={tableId} class="data-table-container">
      <slot name="table" />
    </div>
  </details>

  <!-- Chart controls -->
  <div class="chart-controls">
    <slot name="controls" />
  </div>
</div>

<style>
  .chart-container {
    margin: 2rem 0;
    padding: 1rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-background);
  }

  .chart-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--color-text-primary);
  }

  .chart-description {
    color: var(--color-text-secondary);
    margin-bottom: 1rem;
    font-size: 0.9rem;
  }

  .chart-wrapper {
    position: relative;
    margin: 1rem 0;
  }

  .chart-canvas {
    background: #fff;
    border-radius: 4px;
    position: relative;
  }

  .chart-fallback {
    display: block;
    width: 100%;
    height: auto;
    background: var(--color-gray-100);
  }

  /* Hide fallback when JS loads */
  .chart-canvas[data-loaded="true"] + .chart-fallback {
    display: none;
  }

  /* Loading state */
  .chart-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 200px;
    color: var(--color-text-secondary);
  }

  .loading-spinner {
    width: 32px;
    height: 32px;
    border: 3px solid var(--color-border);
    border-top-color: var(--color-accent);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-right: 1rem;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  /* Error state */
  .chart-error {
    padding: 1rem;
    border: 2px solid var(--color-error);
    border-radius: 4px;
    background: var(--color-error-background);
    color: var(--color-error);
  }

  /* Data table alternative */
  .chart-data-table {
    margin-top: 1rem;
    border-top: 1px solid var(--color-border);
    padding-top: 1rem;
  }

  .table-toggle {
    cursor: pointer;
    padding: 0.5rem 0;
    font-weight: 500;
    color: var(--color-accent);
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .table-toggle:hover {
    color: var(--color-accent-dark);
  }

  .toggle-icon {
    transition: transform 0.2s;
  }

  .chart-data-table[open] .toggle-icon {
    transform: rotate(180deg);
  }

  .data-table-container {
    margin-top: 1rem;
    overflow-x: auto;
  }

  /* Chart controls */
  .chart-controls {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid var(--color-border);
  }

  /* Screen reader only text */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .chart-container {
      padding: 0.5rem;
      margin: 1rem 0;
    }

    .chart-title {
      font-size: 1.1rem;
    }

    .chart-canvas {
      min-height: 250px;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .chart-container {
      border-width: 2px;
    }

    .chart-canvas {
      border: 1px solid;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .loading-spinner {
      animation: none;
    }

    .toggle-icon {
      transition: none;
    }
  }
</style>

<script>
  // Progressive enhancement for interactive charts
  document.addEventListener('DOMContentLoaded', () => {
    const charts = document.querySelectorAll('[data-interactive="true"]');

    charts.forEach(chart => {
      // Mark as loaded to hide fallback image
      chart.setAttribute('data-loaded', 'true');

      // Add keyboard navigation
      chart.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          // Toggle data table
          const container = chart.closest('.chart-container');
          const details = container?.querySelector('.chart-data-table');
          if (details) {
            details.toggleAttribute('open');
          }
        }
      });
    });
  });
</script>