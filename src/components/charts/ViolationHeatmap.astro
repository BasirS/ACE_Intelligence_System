---
/**
 * Geographic Violation Heatmap - Shows NYC hotspots with CUNY overlay
 * Core visualization for demonstrating localized enforcement failures
 */
import BaseChart from './BaseChart.astro';
import type { ViolationData } from '../../scripts/data-processing/csv-loader.ts';

export interface Props {
  data?: ViolationData[];
  showCUNYCampuses?: boolean;
  interactive?: boolean;
  className?: string;
}

const {
  data = [],
  showCUNYCampuses = true,
  interactive = true,
  className = "",
} = Astro.props;

const chartId = "violation-heatmap";

// CUNY campus locations for overlay
const cunyLocations = [
  { name: 'Hunter College', lat: 40.7685, lng: -73.9656 },
  { name: 'City College', lat: 40.8200, lng: -73.9493 },
  { name: 'Baruch College', lat: 40.7402, lng: -73.9836 },
  { name: 'Brooklyn College', lat: 40.6314, lng: -73.9521 },
  { name: 'Queens College', lat: 40.7366, lng: -73.8170 },
  { name: 'John Jay College', lat: 40.7705, lng: -73.9891 },
  { name: 'Lehman College', lat: 40.8731, lng: -73.8906 },
  { name: 'College of Staten Island', lat: 40.6094, lng: -74.1517 },
];

// Top hotspots for table display
const topHotspots = data.slice(0, 20);
---

<BaseChart
  id={chartId}
  title="Where Student Commutes Are Most Disrupted"
  description="Geographic concentration of bus lane violations across NYC, with CUNY campuses highlighted. Notice how violations cluster near educational institutions."
  height="600px"
  className={`violation-heatmap ${className}`}
  fallbackImage="/images/charts/heatmap-fallback.png"
>
  <div id="leaflet-map" class="map-container">
    <!-- Map loading indicator -->
    <div id="map-loading" class="map-loading">
      <div class="loading-spinner"></div>
      <span>Loading violation data...</span>
    </div>

    <!-- Fallback for no-JS -->
    <noscript>
      <div class="map-fallback">
        <p>This interactive map shows where bus violations most impact student commutes.</p>
        <p>Enable JavaScript to explore the data by location.</p>
      </div>
    </noscript>
  </div>

  <!-- Accessible data table -->
  <Fragment slot="table">
    <table class="hotspots-table">
      <caption>Top 20 Violation Hotspots</caption>
      <thead>
        <tr>
          <th scope="col">Rank</th>
          <th scope="col">Location</th>
          <th scope="col">Total Violations</th>
          <th scope="col">Near CUNY Campus</th>
        </tr>
      </thead>
      <tbody>
        {topHotspots.map((hotspot, index) => (
          <tr key={index}>
            <th scope="row">{index + 1}</th>
            <td>{hotspot.stop_name}</td>
            <td class="number">{hotspot.violations.toLocaleString()}</td>
            <td>
              {cunyLocations.some(campus => {
                const distance = Math.sqrt(
                  Math.pow(campus.lat - hotspot.avg_lat, 2) +
                  Math.pow(campus.lng - hotspot.avg_lon, 2)
                );
                return distance < 0.01; // Rough proximity check
              }) ? 'âœ“ Yes' : 'âœ— No'}
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </Fragment>

  <!-- Interactive controls -->
  <Fragment slot="controls">
    <div class="map-controls">
      <fieldset class="layer-controls">
        <legend>Map Layers:</legend>
        <label>
          <input
            type="checkbox"
            id="show-violations"
            checked
            data-layer="violations"
          />
          Violation Hotspots
        </label>
        <label>
          <input
            type="checkbox"
            id="show-cuny"
            checked={showCUNYCampuses}
            data-layer="cuny"
          />
          CUNY Campuses
        </label>
        <label>
          <input
            type="checkbox"
            id="show-heatmap"
            checked
            data-layer="heatmap"
          />
          Heat Map Overlay
        </label>
      </fieldset>

      <div class="filter-controls">
        <label for="violation-threshold">
          Minimum Violations:
          <input
            type="range"
            id="violation-threshold"
            min="0"
            max="20000"
            value="1000"
            step="100"
          />
          <output for="violation-threshold">1000</output>
        </label>
      </div>

      <div class="view-controls">
        <button
          type="button"
          id="reset-view"
          class="control-button"
        >
          Reset View
        </button>
        <button
          type="button"
          id="focus-student-areas"
          class="control-button"
        >
          Focus on Student Areas
        </button>
      </div>
    </div>

    <div class="map-legend">
      <h4>Legend</h4>
      <div class="legend-items">
        <div class="legend-item">
          <span class="legend-circle small"></span>
          Low Violations (&lt;2,000)
        </div>
        <div class="legend-item">
          <span class="legend-circle medium"></span>
          Medium Violations (2,000-10,000)
        </div>
        <div class="legend-item">
          <span class="legend-circle large"></span>
          High Violations (&gt;10,000)
        </div>
        {showCUNYCampuses && (
          <div class="legend-item">
            <span class="legend-icon cuny"></span>
            CUNY Campus
          </div>
        )}
      </div>
    </div>
  </Fragment>
</BaseChart>

<style>
  .violation-heatmap {
    --violation-low: #3b82f6;
    --violation-medium: #f59e0b;
    --violation-high: #dc2626;
    --cuny-color: #059669;
  }

  .map-container {
    width: 100%;
    height: 500px;
    position: relative;
    border-radius: 8px;
    overflow: hidden;
  }

  .map-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    z-index: 1000;
  }

  .map-fallback {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100%;
    padding: 2rem;
    background-color: var(--color-gray-100);
    text-align: center;
  }

  /* Data table */
  .hotspots-table {
    width: 100%;
    border-collapse: collapse;
    margin: 1rem 0;
  }

  .hotspots-table th,
  .hotspots-table td {
    padding: 0.75rem 0.5rem;
    text-align: left;
    border-bottom: 1px solid var(--color-border);
  }

  .hotspots-table th {
    background-color: var(--color-gray-50);
    font-weight: 600;
  }

  .hotspots-table .number {
    text-align: right;
    font-variant-numeric: tabular-nums;
  }

  .hotspots-table tbody tr:hover {
    background-color: var(--color-gray-50);
  }

  /* Map controls */
  .map-controls {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .layer-controls {
    border: 1px solid var(--color-border);
    border-radius: 4px;
    padding: 1rem;
  }

  .layer-controls legend {
    font-weight: 600;
    padding: 0 0.5rem;
  }

  .layer-controls label {
    display: block;
    margin: 0.5rem 0;
    cursor: pointer;
  }

  .filter-controls label {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .filter-controls input[type="range"] {
    width: 100%;
  }

  .filter-controls output {
    font-weight: 600;
    color: var(--color-accent);
  }

  .view-controls {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .control-button {
    padding: 0.5rem 1rem;
    border: 1px solid var(--color-accent);
    background: transparent;
    color: var(--color-accent);
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .control-button:hover {
    background: var(--color-accent);
    color: white;
  }

  /* Legend */
  .map-legend {
    background: var(--color-gray-50);
    border-radius: 4px;
    padding: 1rem;
  }

  .map-legend h4 {
    margin: 0 0 0.5rem 0;
    font-size: 1rem;
  }

  .legend-items {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
  }

  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
  }

  .legend-circle {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    border: 2px solid white;
    box-shadow: 0 0 0 1px rgba(0,0,0,0.2);
  }

  .legend-circle.small {
    background: var(--violation-low);
  }

  .legend-circle.medium {
    background: var(--violation-medium);
  }

  .legend-circle.large {
    background: var(--violation-high);
  }

  .legend-icon.cuny {
    width: 16px;
    height: 16px;
    background: var(--cuny-color);
    border-radius: 2px;
    position: relative;
  }

  .legend-icon.cuny::after {
    content: 'ðŸŽ“';
    position: absolute;
    top: -2px;
    left: -2px;
    font-size: 12px;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .map-container {
      height: 400px;
    }

    .map-controls {
      grid-template-columns: 1fr;
    }

    .legend-items {
      grid-template-columns: 1fr;
    }

    .hotspots-table {
      font-size: 0.9rem;
    }

    .hotspots-table th,
    .hotspots-table td {
      padding: 0.5rem 0.25rem;
    }
  }
</style>

<script>
  import { loadViolationHotspots } from '../../scripts/data-processing/csv-loader.ts';

  class ViolationHeatmap {
    private map: any;
    private data: any[] = [];
    private layers = {
      violations: null as any,
      cuny: null as any,
      heatmap: null as any,
    };

    private config = {
      showViolations: true,
      showCUNY: true,
      showHeatmap: true,
      minViolations: 1000,
    };

    private cunyLocations = [
      { name: 'Hunter College', lat: 40.7685, lng: -73.9656 },
      { name: 'City College', lat: 40.8200, lng: -73.9493 },
      { name: 'Baruch College', lat: 40.7402, lng: -73.9836 },
      { name: 'Brooklyn College', lat: 40.6314, lng: -73.9521 },
      { name: 'Queens College', lat: 40.7366, lng: -73.8170 },
      { name: 'John Jay College', lat: 40.7705, lng: -73.9891 },
      { name: 'Lehman College', lat: 40.8731, lng: -73.8906 },
      { name: 'College of Staten Island', lat: 40.6094, lng: -74.1517 },
    ];

    constructor() {
      this.init();
    }

    async init() {
      // Wait for Leaflet to be available
      await this.loadLeaflet();
      await this.loadData();
      this.initMap();
      this.renderLayers();
      this.attachEventListeners();
      this.hideLoading();
    }

    private async loadLeaflet() {
      // Dynamically load Leaflet if not already loaded
      if (typeof (window as any).L === 'undefined') {
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';
        document.head.appendChild(link);

        const script = document.createElement('script');
        script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
        document.head.appendChild(script);

        await new Promise(resolve => {
          script.onload = resolve;
        });
      }
    }

    async loadData() {
      try {
        this.data = await loadViolationHotspots();
        console.log('Heatmap data loaded:', this.data.length, 'hotspots');
      } catch (error) {
        console.error('Failed to load heatmap data:', error);
      }
    }

    private initMap() {
      const container = document.getElementById('leaflet-map');
      if (!container) return;

      const L = (window as any).L;

      this.map = L.map(container, {
        center: [40.7128, -74.0060], // NYC center
        zoom: 11,
        zoomControl: true,
        attributionControl: true,
      });

      // Add base tile layer
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Â© OpenStreetMap contributors',
        maxZoom: 18,
      }).addTo(this.map);
    }

    private renderLayers() {
      this.renderViolationLayer();
      this.renderCUNYLayer();
      this.renderHeatmapLayer();
    }

    private renderViolationLayer() {
      if (!this.config.showViolations) return;

      const L = (window as any).L;
      const filteredData = this.data.filter(d => d.violations >= this.config.minViolations);

      this.layers.violations = L.layerGroup();

      filteredData.forEach(hotspot => {
        const radius = Math.max(5, Math.min(25, hotspot.violations / 1000));
        const color = this.getViolationColor(hotspot.violations);

        const circle = L.circleMarker([hotspot.avg_lat, hotspot.avg_lon], {
          radius,
          fillColor: color,
          color: '#fff',
          weight: 2,
          opacity: 1,
          fillOpacity: 0.7,
        });

        // Add popup with details
        circle.bindPopup(`
          <div class="violation-popup">
            <h3>${hotspot.stop_name}</h3>
            <p><strong>${hotspot.violations.toLocaleString()}</strong> violations</p>
            <p>Major impact on student commutes</p>
          </div>
        `);

        // Add tooltip
        circle.bindTooltip(
          `${hotspot.stop_name}: ${hotspot.violations} violations`,
          { permanent: false, direction: 'top' }
        );

        this.layers.violations.addLayer(circle);
      });

      if (this.config.showViolations) {
        this.layers.violations.addTo(this.map);
      }
    }

    private renderCUNYLayer() {
      if (!this.config.showCUNY) return;

      const L = (window as any).L;
      this.layers.cuny = L.layerGroup();

      this.cunyLocations.forEach(campus => {
        const marker = L.marker([campus.lat, campus.lng], {
          icon: L.divIcon({
            className: 'cuny-marker',
            html: 'ðŸŽ“',
            iconSize: [30, 30],
            iconAnchor: [15, 15],
          }),
        });

        marker.bindPopup(`
          <div class="cuny-popup">
            <h3>${campus.name}</h3>
            <p>CUNY Campus</p>
            <p>Students depend on nearby bus routes</p>
          </div>
        `);

        this.layers.cuny.addLayer(marker);
      });

      if (this.config.showCUNY) {
        this.layers.cuny.addTo(this.map);
      }
    }

    private renderHeatmapLayer() {
      // This would integrate with a heatmap plugin like Leaflet.heat
      // For now, we'll use the circle markers as a visual approximation
    }

    private getViolationColor(violations: number): string {
      if (violations < 2000) return '#3b82f6';
      if (violations < 10000) return '#f59e0b';
      return '#dc2626';
    }

    private attachEventListeners() {
      // Layer toggles
      const layerInputs = document.querySelectorAll('[data-layer]');
      layerInputs.forEach(input => {
        input.addEventListener('change', (e) => {
          const layer = (e.target as HTMLInputElement).dataset.layer;
          const checked = (e.target as HTMLInputElement).checked;
          this.toggleLayer(layer!, checked);
        });
      });

      // Violation threshold filter
      const thresholdSlider = document.getElementById('violation-threshold') as HTMLInputElement;
      const thresholdOutput = document.querySelector('output[for="violation-threshold"]') as HTMLOutputElement;

      thresholdSlider?.addEventListener('input', (e) => {
        const value = parseInt((e.target as HTMLInputElement).value);
        thresholdOutput.textContent = value.toLocaleString();
        this.config.minViolations = value;
        this.updateViolationLayer();
      });

      // View controls
      document.getElementById('reset-view')?.addEventListener('click', () => {
        this.map.setView([40.7128, -74.0060], 11);
      });

      document.getElementById('focus-student-areas')?.addEventListener('click', () => {
        this.focusOnStudentAreas();
      });
    }

    private toggleLayer(layer: string, show: boolean) {
      this.config[`show${layer.charAt(0).toUpperCase() + layer.slice(1)}` as keyof typeof this.config] = show;

      if (this.layers[layer as keyof typeof this.layers]) {
        if (show) {
          this.layers[layer as keyof typeof this.layers].addTo(this.map);
        } else {
          this.map.removeLayer(this.layers[layer as keyof typeof this.layers]);
        }
      }
    }

    private updateViolationLayer() {
      if (this.layers.violations) {
        this.map.removeLayer(this.layers.violations);
      }
      this.renderViolationLayer();
    }

    private focusOnStudentAreas() {
      // Focus on areas near CUNY campuses with high violations
      const bounds = this.cunyLocations.map(campus => [campus.lat, campus.lng]);
      const L = (window as any).L;
      const group = L.featureGroup(bounds.map(coord => L.marker(coord)));
      this.map.fitBounds(group.getBounds().pad(0.1));
    }

    private hideLoading() {
      const loading = document.getElementById('map-loading');
      if (loading) {
        loading.style.display = 'none';
      }
    }
  }

  // Initialize map when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const mapContainer = document.getElementById('leaflet-map');
    if (mapContainer) {
      new ViolationHeatmap();
    }
  });
</script>

<style is:global>
  /* Global styles for Leaflet popups */
  .violation-popup,
  .cuny-popup {
    font-family: inherit;
    line-height: 1.4;
  }

  .violation-popup h3,
  .cuny-popup h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1rem;
    font-weight: 600;
  }

  .violation-popup p,
  .cuny-popup p {
    margin: 0.25rem 0;
    font-size: 0.9rem;
  }

  .cuny-marker {
    background: var(--cuny-color, #059669);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 2px solid white;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }
</style>