---
// Data loading component for ClearLane Initiative visualizations
// Handles CSV loading, caching, and transformation for interactive components
export interface DataLoaderProps {
  datasets: string[];
  transformations?: Record<string, (data: any[]) => any[]>;
  caching?: boolean;
}

interface Props extends DataLoaderProps {}

const { datasets, transformations = {}, caching = true } = Astro.props;

// Define data loading utilities
const DATA_BASE_PATH = '/dashboard/insights/';

async function loadCSVData(filename: string) {
  try {
    const response = await fetch(DATA_BASE_PATH + filename);
    if (!response.ok) {
      throw new Error(`Failed to load ${filename}: ${response.statusText}`);
    }

    const text = await response.text();
    return parseCSV(text);
  } catch (error) {
    console.error(`Error loading ${filename}:`, error);
    return [];
  }
}

function parseCSV(text: string) {
  const lines = text.trim().split('\n');
  if (lines.length === 0) return [];

  const headers = lines[0].split(',');
  return lines.slice(1).map(line => {
    const values = parseCSVLine(line);
    const row: Record<string, any> = {};

    headers.forEach((header, index) => {
      const cleanHeader = header.replace(/"/g, '').trim();
      let value = values[index] || '';

      // Auto-detect and convert data types
      if (value === '') {
        row[cleanHeader] = null;
      } else if (!isNaN(Number(value))) {
        row[cleanHeader] = Number(value);
      } else if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {
        row[cleanHeader] = value.toLowerCase() === 'true';
      } else {
        row[cleanHeader] = value.replace(/"/g, '');
      }
    });

    return row;
  });
}

function parseCSVLine(line: string): string[] {
  const result = [];
  let current = '';
  let inQuotes = false;

  for (let i = 0; i < line.length; i++) {
    const char = line[i];

    if (char === '"') {
      inQuotes = !inQuotes;
    } else if (char === ',' && !inQuotes) {
      result.push(current);
      current = '';
    } else {
      current += char;
    }
  }

  result.push(current);
  return result;
}

// Pre-load critical datasets for immediate use
const preloadDatasets = [
  'hourly_agg.csv',
  'top_hotspots.csv',
  'route_counts.csv',
  'CUNY_Insights/campus_summary_2025.csv'
];

const dataCache = new Map();

if (caching) {
  for (const dataset of preloadDatasets) {
    try {
      const data = await loadCSVData(dataset);
      if (transformations[dataset]) {
        dataCache.set(dataset, transformations[dataset](data));
      } else {
        dataCache.set(dataset, data);
      }
    } catch (error) {
      console.error(`Failed to preload ${dataset}:`, error);
    }
  }
}
---

<div id="data-loader" class="hidden" data-cache-size={dataCache.size}>
  <!-- Hidden component that provides data loading utilities -->
</div>

<script>
  // Client-side data loading utilities
  class ClearLaneDataLoader {
    constructor() {
      this.cache = new Map();
      this.basePath = '/dashboard/insights/';
    }

    async loadDataset(filename) {
      // Check cache first
      if (this.cache.has(filename)) {
        return this.cache.get(filename);
      }

      try {
        const response = await fetch(this.basePath + filename);
        if (!response.ok) {
          throw new Error(`Failed to load ${filename}: ${response.statusText}`);
        }

        const text = await response.text();
        const data = this.parseCSV(text);

        // Cache the result
        this.cache.set(filename, data);
        return data;
      } catch (error) {
        console.error(`Error loading ${filename}:`, error);
        return [];
      }
    }

    parseCSV(text) {
      const lines = text.trim().split('\n');
      if (lines.length === 0) return [];

      const headers = lines[0].split(',').map(h => h.replace(/"/g, '').trim());

      return lines.slice(1).map(line => {
        const values = this.parseCSVLine(line);
        const row = {};

        headers.forEach((header, index) => {
          let value = values[index] || '';

          // Auto-detect and convert data types
          if (value === '') {
            row[header] = null;
          } else if (!isNaN(Number(value))) {
            row[header] = Number(value);
          } else if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {
            row[header] = value.toLowerCase() === 'true';
          } else {
            row[header] = value.replace(/"/g, '');
          }
        });

        return row;
      });
    }

    parseCSVLine(line) {
      const result = [];
      let current = '';
      let inQuotes = false;

      for (let i = 0; i < line.length; i++) {
        const char = line[i];

        if (char === '"') {
          inQuotes = !inQuotes;
        } else if (char === ',' && !inQuotes) {
          result.push(current);
          current = '';
        } else {
          current += char;
        }
      }

      result.push(current);
      return result;
    }

    // Utility methods for common data transformations
    aggregateByHour(data, valueField = 'violations') {
      const hourlyData = {};

      data.forEach(row => {
        const hour = row.hour || 0;
        if (!hourlyData[hour]) {
          hourlyData[hour] = 0;
        }
        hourlyData[hour] += Number(row[valueField]) || 0;
      });

      return Object.entries(hourlyData).map(([hour, total]) => ({
        hour: Number(hour),
        total: total
      })).sort((a, b) => a.hour - b.hour);
    }

    filterByCampus(data, campusName) {
      return data.filter(row =>
        row.campus_name === campusName ||
        row.campus === campusName
      );
    }

    getTopN(data, field, n = 10, sortDesc = true) {
      const sorted = data.sort((a, b) => {
        const aVal = Number(a[field]) || 0;
        const bVal = Number(b[field]) || 0;
        return sortDesc ? bVal - aVal : aVal - bVal;
      });

      return sorted.slice(0, n);
    }

    // Calculate paradox score as defined in pipeline analysis
    calculateParadoxScore(violationCount, enforcementIntensity, speedImprovement) {
      const speedImprovementFactor = speedImprovement > 0 ? speedImprovement + 1 : 1;
      return (violationCount * enforcementIntensity) / speedImprovementFactor;
    }
  }

  // Make data loader globally available
  window.ClearLaneData = new ClearLaneDataLoader();

  // Preload critical datasets
  const criticalDatasets = [
    'hourly_agg.csv',
    'top_hotspots.csv',
    'route_counts.csv',
    'CUNY_Insights/campus_summary_2025.csv'
  ];

  // Load datasets on page load
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('ClearLane Data Loader initialized');

    // Preload critical datasets for immediate use
    for (const dataset of criticalDatasets) {
      try {
        await window.ClearLaneData.loadDataset(dataset);
        console.log(`Preloaded ${dataset}`);
      } catch (error) {
        console.error(`Failed to preload ${dataset}:`, error);
      }
    }

    // Dispatch event when data is ready
    window.dispatchEvent(new CustomEvent('clearlane-data-ready', {
      detail: {
        loadedDatasets: criticalDatasets,
        dataLoader: window.ClearLaneData
      }
    }));
  });
</script>

<style>
  #data-loader {
    display: none;
  }
</style>